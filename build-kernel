#!/bin/bash

#Env variable
kernel_ver=$(eselect kernel list | cat | grep "*" | cut -b 15-17)
kernel_selected=$(eselect kernel list | cat | grep "*" | cut -d '-' -f2)
BOOT_KERNEL=$(echo "$(uname -r)" | cut -c -12)
verify_printk_true=$(zcat /proc/config.gz | grep 'CONFIG_PRINTK_TIME=y')
NVME_1=/dev/disk/by-uuid/a00bc72b-4433-4ca2-8989-d63e268091bd
#$NVME_2=
EXTERNAL_HDD=/dev/disk/by-uuid/9299af67-f63a-4d1c-bd63-082fc90d55a8
#Disable TPM LUKS ENROLL for people that dosent use LUKS encrypted drives
LUKS_DISABLE=0

#Force run with root
if [ "$EUID" -ne 0 ]; then
	echo "Please run as root"
	exit
fi

#Funtions
set_kernel() {
	eselect kernel list
	read -p "Select the kernel you whant to use: " input

	while [[ $input != +([0-9]) ]]; do
		echo "Pls select and integer" && echo
		eselect kernel list
		read -p "Select the kernel you whant to use:" input
		echo
	done

	eselect kernel set $input
	eselect kernel list
	echo Done!
	read -n 1 -s -r -p "Press any key to continue..."
}

## Patch Functions
patch_cachyos() {
	cd /usr/src/linux
	curl https://raw.githubusercontent.com/CachyOS/kernel-patches/master/$kernel_ver/all/0001-cachyos-base-all.patch -o 0001-cachyos-base-all.patch
	patch -p1 <0001-cachyos-base-all.patch
	read -n 1 -s -r -p "Press any key to continue..." && echo
}

patch_tsc() {
	cd /usr/src/linux
	#Dowload tsc patches
	curl https://git.uplinklabs.net/steven/ec2-packages/raw/branch/master/linux-hsw/0026-x86-implement-tsc-directsync-for-systems-without-IA3.patch -o 0026-x86-implement-tsc-directsync-for-systems-without-IA3.patch
	curl https://git.uplinklabs.net/steven/ec2-packages/raw/branch/master/linux-hsw/0028-x86-save-restore-TSC-counter-value-during-sleep-wake.patch -o 0028-x86-save-restore-TSC-counter-value-during-sleep-wake.patch
	curl https://git.uplinklabs.net/steven/ec2-packages/raw/branch/master/linux-hsw/0029-x86-only-restore-TSC-if-we-have-IA32_TSC_ADJUST-or-d.patch -o 0029-x86-only-restore-TSC-if-we-have-IA32_TSC_ADJUST-or-d.patch
	curl https://raw.githubusercontent.com/MrDuartePT/hyprland-dotfiles/master/kernel-patches-config/0031-tsc.patch -o 0031-tsc.patch

	#Apply Patches
	patch -p1 <0026-x86-implement-tsc-directsync-for-systems-without-IA3.patch
	read -n 1 -s -r -p "Press any key to continue..." && echo

	patch -p1 <0028-x86-save-restore-TSC-counter-value-during-sleep-wake.patch
	read -n 1 -s -r -p "Press any key to continue..." && echo

	patch -p1 <0029-x86-only-restore-TSC-if-we-have-IA32_TSC_ADJUST-or-d.patch
	read -n 1 -s -r -p "Press any key to continue..." && echo

	patch -p1 <0031-tsc.patch
	read -n 1 -s -r -p "Press any key to continue..." && echo
}

patch_EEVDF() {
	cd /usr/src/linux
	curl https://raw.githubusercontent.com/CachyOS/kernel-patches/master/$kernel_ver/sched/0001-EEVDF.patch -o 0001-EEVDF.patch
	patch -p1 <0001-EEVDF.patch
	read -n 1 -s -r -p "Press any key to continue..." && echo
}

patch_bore_eevdf() {
	cd /usr/src/linux
	curl https://raw.githubusercontent.com/CachyOS/kernel-patches/master/$kernel_ver/sched/0001-bore-eevdf.patch -o 0001-bore-eevdf.patch
	patch -p1 <0001-bore-eevdf.patch
	read -n 1 -s -r -p "Press any key to continue..." && echo
}

patch_bore_cachyos() {
	cd /usr/src/linux
	curl https://raw.githubusercontent.com/CachyOS/kernel-patches/master/$kernel_ver/sched/0001-bore-cachy.patch -o 0001-bore-cachy.patch
	patch -p1 <0001-bore-cachy.patch
	read -n 1 -s -r -p "Press any key to continue..." && echo
}

patch_file() {
	cd /usr/src/linux
	read -p "$(tput bold) Type the full path or web address of the file$(tput sgr0): " input
	check_is_link=$(echo ${input} | grep http)
	if [[ $check_is_link ]]; then
		curl ${input} -o patch.patch
	else
		echo $input
		cp $input ./patch.patch
	fi
	patch -p1 <patch.patch
	read -n 1 -s -r -p "Press any key to continue..." && echo
}
##END

patch_kernel() {
	echo "Chose the kernel patch:"
	echo
	echo "1 - CachyOS Kernel Patch"
	echo "2 - TSC Kernel Patch (requires tsc=directsync kernel cmd)"
	echo "3 - EEVDF Kernel Patch (dont apply 4 & 5 patch)"
	echo "4 - BORE EEVDF Kernel Patch (dont apply 3 & 5 patch)"
	echo "5 - BORE CachyOS Kernel Patch (dont apply 3 & 4 patch)"
	echo "6 - From file/link"
	echo
	echo "Choose your option (Press Enter when done patching)"
	read -p "Note: Dont run the same patch twices: " option

	case $option in
	1)
		patch_cachyos
		patch_kernel
		;;
	2)
		patch_tsc
		patch_kernel
		;;
	3)
		patch_EEVDF
		patch_kernel
		;;
	4)
		patch_bore_eevdf
		patch_kernel
		;;
	5)
		patch_bore_cachyos
		patch_kernel
		;;
	6)
		patch_file
		patch_kernel
		;;

	*) ;;
	esac
}

copy_kernel_config() {
	echo "You what to copy the kernel config from:"
	echo "1 - Copy from /proc/config.gz"
	echo "2 - Copy from running kernel folder"
	echo "3 - Copy from Path"
	read -p "Choose your option (any other key + Enter to cancel): " option

	case $option in
	1)
		echo "Reading /proc/config.gz and copy to /usr/src/linux/.config..."
		zcat /proc/config.gz >/usr/src/linux/.config
		echo Done!
		read -n 1 -s -r -p "Press any key to continue..." && echo
		;;

	2)
		echo "Copy From /usr/src/${BOOT_KERNEL}/.config to /usr/src/linux/.config"
		cp /usr/src/linux-${BOOT_KERNEL}/.config /usr/src/linux/.config
		echo Done!
		read -n 1 -s -r -p "Press any key to continue..." && echo
		;;

	3)
		read -p "$(tput bold) Type the full path$(tput sgr0): " path
		cp $path /usr/src/linux/.config
		echo Done!
		read -n 1 -s -r -p "Press any key to continue..." && echo
		;;

	*)
		echo Cancel!
		read -n 1 -s -r -p "Press any key to continue..." && echo
		;;
	esac

}

compile_kernel() {
	#Need pre-requisites
	source /etc/profile
	env-update
	cd /usr/src/linux

	#Copy MOK efikeys
	cp /etc/efikeys/MOK/signing_key.x509 /usr/src/linux/certs/signing_key.pem
	cp /etc/efikeys/MOK/signing_key.priv /usr/src/linux/certs/
	cp /etc/efikeys/MOK/x509.genkey /usr/src/linux/certs/

	#Start building Kernel
	echo "Customize Kernel - Menuconfig"
	make LLVM=1 LLVM_IAS=1 menuconfig

	echo "Building Kernel"
	sleep 2
	make LLVM=1 LLVM_IAS=1 --jobs=16

	echo "Install Modules"
	sleep 2
	make LLVM=1 LLVM_IAS=1 modules_install

	echo "Install Kernel"
	sleep 2
	make LLVM=1 LLVM_IAS=1 install

	echo "Move Kernel to /boot/efi/gentoo folder"
	read -n 1 -s -r -p "Press any key to continue..." && echo
}

rebuild_modules() {
	echo "Rebulding Modules"
	LLVM=1 emerge @module-rebuild --jobs=16 --exclude=sys-kernel/gentoo-kernel-bin
}

build_initramfs() {
	echo "Rebulding Initramfs (dracut)" && sleep 2
	dracut -f --regenerate-all
	
	#Not using unfied kernel image
	#mv /boot/{System.map-*,config-*,vmlinuz-*,refind_linux.conf} /boot/EFI/gentoo 
	
	#Using unfied Kernel Image
	mkdir /boot/cleanup
	mv /boot/{System.map-*,config-*,vmlinuz-*,refind_linux.conf} /boot/cleanup
	mv /boot/EFI/Linux/* /boot/EFI/gentoo
	rm -r /boot/EFI/Linux/ /boot/cleanup

	echo Done!
	read -n 1 -s -r -p "Press any key to continue..." && echo
}

sign_kernel() {
	sbctl sign /boot/EFI/gentoo/vmlinuz-$kernel_selected-*
	sbctl sign-all
	echo Done!
	read -n 1 -s -r -p "Press any key to continue..." && echo
}

tpm_enroll_luks() {
	#Fix when running the 6 option
	if [[ $LUKS_DISABLE -eq 0 ]]; then
		clevis luks unbind -d $NVME_1 -s 1
		clevis luks unbind -d $EXTERNAL_HDD -s 1
		clevis luks bind -d $NVME_1 tpm2 '{"pcr_bank":"sha256","pcr_ids":"0,2,3,5,6,7,11"}'
		clevis luks bind -d $EXTERNAL_HDD tpm2 '{"pcr_bank":"sha256","pcr_ids":"0,1,2,3,5,6,7,11"}'
	else
		echo && echo "$(tput bold)This option is disable set LUKS_DISABLE to 0$(tput sgr0)" && echo
	fi
	echo Done!
	read -n 1 -s -r -p "Press any key to continue..." && echo
}

start_menu() {
	clear
	echo "Configure an Bulding Kernel - Start Menu"
	echo
	echo "1 - Select the kernel"
	echo "2 - Patch Kernel"
	echo "3 - Copy kernel config"
	echo "4 - Compile the kernel"
	echo "5 - Rebuil out of tree kernel modules"
	echo "6 - Rebuil initramfs"
	#echo "7 - Sign Kernel Secure Boot"
	echo "7 - Enroll Disks Luks key in TPM"
	echo "8 - Run All"
	echo
	read -p "Choose your option (any other key + Enter to cancel): " option

	case $option in
	1)
		set_kernel
		start_menu
		;;

	2)
		patch_kernel
		start_menu
		;;

	3)
		copy_kernel_config
		start_menu
		;;

	4)
		compile_kernel
		start_menu
		;;

	5)
		rebuild_modules
		start_menu
		;;
	6)
		build_initramfs
		start_menu
		;;
	#7)
		#sign_kernel
		#start_menu
		#;;
	7)
		tpm_enroll_luks
		start_menu
		;;
	8)
		set_kernel
		patch_kernel
		copy_kernel_config
		compile_kernel
		rebuild_modules
		build_initramfs
		#sign_kernel
		echo "Done!!! - Reboot the system"
		;;

	*) ;;
	esac
}

#Start of the script
start_menu
