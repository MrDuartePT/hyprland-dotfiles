#!/bin/bash

#Env variable
kernel_selected=$(eselect kernel list | cat | grep "*" | cut -b 15-17)
BOOT_KERNEL=$(echo "$(uname -r)" | cut -c -12)
verify_printk_true=$(zcat /proc/config.gz | grep 'CONFIG_PRINTK_TIME=y')
NVME_1=/dev/disk/by-uuid/a00bc72b-4433-4ca2-8989-d63e268091bd
#$NVME_2=
EXTERNAL_HDD=/dev/disk/by-uuid/9299af67-f63a-4d1c-bd63-082fc90d55a8
#Disable TPM LUKS ENROLL for people that dosent use LUKS encrypted drives
LUKS_DISABLE=0

#Force run with root
if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

#Funtions
set_kernel () {
  eselect kernel list
  read -p "Select the kernel you whant to use: " input

  while [[ $input != +([0-9]) ]]
  do
    echo "Pls select and integer" && echo
    eselect kernel list
    read -p "Select the kernel you whant to use:" input
    echo
  done

  eselect kernel set $input
  eselect kernel list
  echo Done!
  read -n 1 -s -r -p "Press any key to continue..."
}

patch_kernel () {
  echo "Chose the kernel patch:"
  echo
  echo "1 - CachyOS Kernel Patch"
  echo "2 - From file/link"
  echo
  echo "Choose your option (any other key + Enter to cancel)"
  read -p "Note: Dont run the same patch twices: " option

  case $option in
  1)
    cd /usr/src/linux
    curl https://raw.githubusercontent.com/CachyOS/kernel-patches/master/$kernel_selected/all/0001-cachyos-base-all.patch -o patch-cachyos.patch
    patch -p1 < patch-cachyos.patch
    read -n 1 -s -r -p "Press any key to continue..." && echo
    ;;
  2)
    cd /usr/src/linux
    read -p "$(tput bold) Type the full path or web address of the file$(tput sgr0): " input
    check_is_link=$(echo ${input} | grep http)
    if [[ $check_is_link ]]; then
      curl ${input} -o patch.patch
    else
      echo $input
      cp $input ./patch.patch
    fi
    patch -p1 < patch.patch
    read -n 1 -s -r -p "Press any key to continue..." && echo
    ;;

  *)
    ;;
  esac
}

copy_kernel_config () {
  echo "You what to copy the kernel config from:"
  echo "1 - Copy from /proc/config.gz"
  echo "2 - Copy from running kernel folder"
  echo "3 - Copy from Path"
  read -p "Choose your option (any other key + Enter to cancel): " option

case $option in
  1)
    echo "Reading /proc/config.gz and copy to /usr/src/linux/.config..."
    zcat /proc/config.gz > /usr/src/linux/.config
    echo Done!
    read -n 1 -s -r -p "Press any key to continue..." && echo
    ;;

  2)
    echo "Copy From /usr/src/${BOOT_KERNEL}/.config to /usr/src/linux/.config"
    cp /usr/src/linux-${BOOT_KERNEL}/.config /usr/src/linux/.config
    echo Done!
    read -n 1 -s -r -p "Press any key to continue..." && echo
    ;;

  3)
    read -p "$(tput bold) Type the full path$(tput sgr0): " path
    cp $path /usr/src/linux/.config
    echo Done!
    read -n 1 -s -r -p "Press any key to continue..." && echo
    ;;
  
  *)
    echo Cancel!
    read -n 1 -s -r -p "Press any key to continue..." && echo
    ;;
esac

}

compile_kernel () {
  #Need pre-requisites
  source /etc/profile
  env-update
  cd /usr/src/linux

  #Start building Kernel
  echo "Customize Kernel - Menuconfig"
  make LLVM=1 LLVM_IAS=1 menuconfig

  echo "Building Kernel"
  sleep 2
  make LLVM=1 LLVM_IAS=1 --jobs=16


  echo "Install Modules"
  sleep 2
  make LLVM=1 LLVM_IAS=1 modules_install

  echo "Install Kernel"
  sleep 2
  make LLVM=1 LLVM_IAS=1 install

  echo "Refind config"
  mkrlconf

  echo "Move Kernel to /boot/efi/gentoo folder"
  mv /boot/{System.map-*,config-*,vmlinuz-*,refind_linux.conf} /boot/EFI/gentoo
  read -n 1 -s -r -p "Press any key to continue..." && echo
}

rebuild_modules () {
  echo "Rebulding Modules"
  LLVM=1 emerge @module-rebuild --exclude=sys-kernel/gentoo-kernel-bin
}

build_initramfs () {
  echo "Rebulding Initramfs (dracut)" && sleep 2
  dracut -f --regenerate-all
  mv /boot/initramfs-* /boot/EFI/gentoo
  echo Done!
  read -n 1 -s -r -p "Press any key to continue..." && echo
}

tpm_enroll_luks () {
  #Fix when running the 6 option
  if [[ $LUKS_DISABLE -eq 0 ]]; then
    clevis luks unbind -d $NVME_1 -s 1
    clevis luks unbind -d $EXTERNAL_HDD -s 1
    clevis luks bind -d $NVME_1 tpm2 '{"pcr_bank":"sha256","pcr_ids":"0,2,3,5,6,7"}'
    clevis luks bind -d $EXTERNAL_HDD tpm2 '{"pcr_bank":"sha256","pcr_ids":"0,2,3,5,6,7"}'
  else
      echo && echo "$(tput bold)This option is disable set LUKS_DISABLE to 0$(tput sgr0)" && echo
  fi
  echo Done!
  read -n 1 -s -r -p "Press any key to continue..." && echo
}

start_menu () {
clear
echo "Configure an Bulding Kernel - Start Menu"
echo
echo "1 - Select the kernel"
echo "2 - Patch Kernel"
echo "3 - Copy kernel config"
echo "4 - Compile the kernel"
echo "5 - Rebuil out of tree kernel modules"
echo "6 - Rebuil initramfs"
echo "7 - Enroll Disks Luks key in TPM"
echo "8 - Run All"
echo
read -p "Choose your option (any other key + Enter to cancel): " option

case $option in
  1)
    set_kernel
    start_menu
    ;;

  2)
    patch_kernel
    start_menu
    ;;

  3)
    copy_kernel_config
    start_menu
    ;;

  4)
    compile_kernel
    start_menu
    ;;

  5)
    rebuild_modules
    start_menu
    ;;
  6)
    build_initramfs
    start_menu
    ;;
  7)
    tpm_enroll_luks
    start_menu
    ;;
  8)
    set_kernel
    patch_kernel
    copy_kernel_config
    compile_kernel
    rebuild_modules
    build_initramfs
    tpm_enroll_luks
    echo "Done!!! - Reboot the system"
    ;;
  
  *)
    ;;
esac
}

#Start of the script
start_menu
